import Head from "next/head";
import styles from "../styles/Home.module.scss";

import { useState } from "react";
//Material
import Drawer from "@material-ui/core/Drawer";
import LinearProgress from "@material-ui/core/LinearProgress";
import Grid from "@material-ui/core/Grid";
import Badge from "@material-ui/core/Badge";
import AddShoppingCartIcon from "@material-ui/icons/AddShoppingCart";
import Button from "@material-ui/core/Button";
import IconButton from "@material-ui/core/IconButton";

//Components
import Cart from "../src/components/Cart/Cart";
import Item from "../src/components/Item/Item";
import Header from "../src/components/Header/Header";

export type CartItemType = {
  id: number;
  name: string;
  price: number;
  sellingPrice: number;
  imageUrl: string;
  amount: number;
};


const Home = () => {

  const { items } = require('./api/hello')
  const [cartOpen, setCartOpen] = useState(false);
  const [cartItems, setCartItems] = useState([] as CartItemType[]);


  const getTotalItems = (items: CartItemType[]) =>
    items.reduce((ack: number, item) => ack + item.amount, 0);

  const handleAddToCart = (clickedItem: CartItemType) => {
    setCartItems((prev) => {
      const isItemInCart = prev.find((item) => item.id === clickedItem.id);

      if (isItemInCart) {
        return prev.map((item) =>
          item.id === clickedItem.id
            ? { ...item, amount: item.amount + 1 }
            : item
        );
      }
      return [...prev, { ...clickedItem, amount: 1 }];
    });
  };

  const handleRemoveFromCart = (id: number) => {
    setCartItems((prev) =>
      prev.reduce((ack, item) => {
        if (item.id === id) {
          if (item.amount === 1) return ack;
          return [...ack, { ...item, amount: item.amount - 1 }];
        } else {
          return [...ack, item];
        }
      }, [] as CartItemType[])
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>CodeBy e-commerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/icon.ico" />
      </Head>
      <Header />

      <Drawer anchor="right" open={cartOpen} onClose={() => setCartOpen(false)}>
        <Button
          onClick={() => setCartOpen(false)}
          className={styles.closeButton}
          color="primary"
        >
          X
        </Button>

        <Cart
          cartItems={cartItems}
          addToCart={handleAddToCart}
          removeFromCart={handleRemoveFromCart}
        />
      </Drawer>
      <IconButton onClick={() => setCartOpen(true)} className={styles.icon}>
        <Badge badgeContent={getTotalItems(cartItems)} color="error" overlap="rectangular">
          <AddShoppingCartIcon />
        </Badge>
      </IconButton>
      <div className={styles.listArea}>
        <Grid container spacing={3}>
          {items?.map((item: CartItemType) => (
            <Grid item key={item.id} xs={12} sm={4}>
              <Item item={item} handleAddToCart={handleAddToCart} />
            </Grid>
          ))}
        </Grid>
      </div>
    </div>
  );
};

export default Home;
